/**
 * Automatically generated by Zserio Java extension version 2.4.2.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package example.calculator;

public final class Calculator
{
    public static abstract class CalculatorService implements zserio.runtime.service.ServiceInterface
    {
        public CalculatorService()
        {
            methodMap = new java.util.HashMap<java.lang.String, Method>();
            methodMap.put("power",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return powerMethod(requestData, context);
                    }
                }
            );
            methodMap.put("intSum",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return intSumMethod(requestData, context);
                    }
                }
            );
            methodMap.put("byteSum",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return byteSumMethod(requestData, context);
                    }
                }
            );
            methodMap.put("intMul",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return intMulMethod(requestData, context);
                    }
                }
            );
            methodMap.put("floatMul",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return floatMulMethod(requestData, context);
                    }
                }
            );
            methodMap.put("bitMul",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return bitMulMethod(requestData, context);
                    }
                }
            );
            methodMap.put("identity",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return identityMethod(requestData, context);
                    }
                }
            );
            methodMap.put("concat",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return concatMethod(requestData, context);
                    }
                }
            );
            methodMap.put("name",
                new Method()
                {
                    @Override
                    public byte[] invoke(byte[] requestData, java.lang.Object context)
                            throws zserio.runtime.ZserioError
                    {
                        return nameMethod(requestData, context);
                    }
                }
            );
        }

        @Override
        public byte[] callMethod(java.lang.String methodName, byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final Method method = methodMap.get(methodName);
            if (method == null)
            {
                throw new zserio.runtime.service.ServiceException(
                        "example.calculator.Calculator: Method '" + methodName + "' does not exist!");
            }
            return method.invoke(requestData, context);
        }

        public static java.lang.String serviceFullName()
        {
            return SERVICE_FULL_NAME;
        }

        public static java.lang.String[] methodNames()
        {
            return new java.lang.String[]
            {
                "power",
                "intSum",
                "byteSum",
                "intMul",
                "floatMul",
                "bitMul",
                "identity",
                "concat",
                "name"
            };
        }

        protected abstract example.calculator.Double powerImpl(
                example.calculator.BaseAndExponent request, java.lang.Object context);

        protected abstract example.calculator.Double intSumImpl(
                example.calculator.Integers request, java.lang.Object context);

        protected abstract example.calculator.Double byteSumImpl(
                example.calculator.Bytes request, java.lang.Object context);

        protected abstract example.calculator.Double intMulImpl(
                example.calculator.Integers request, java.lang.Object context);

        protected abstract example.calculator.Double floatMulImpl(
                example.calculator.Doubles request, java.lang.Object context);

        protected abstract example.calculator.Bool bitMulImpl(
                example.calculator.Bools request, java.lang.Object context);

        protected abstract example.calculator.Double identityImpl(
                example.calculator.Double request, java.lang.Object context);

        protected abstract example.calculator.String concatImpl(
                example.calculator.Strings request, java.lang.Object context);

        protected abstract example.calculator.String nameImpl(
                example.calculator.EnumWrapper request, java.lang.Object context);

        private byte[] powerMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.BaseAndExponent request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.BaseAndExponent.class, requestData);

            final example.calculator.Double response = powerImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] intSumMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Integers request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Integers.class, requestData);

            final example.calculator.Double response = intSumImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] byteSumMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Bytes request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Bytes.class, requestData);

            final example.calculator.Double response = byteSumImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] intMulMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Integers request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Integers.class, requestData);

            final example.calculator.Double response = intMulImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] floatMulMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Doubles request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Doubles.class, requestData);

            final example.calculator.Double response = floatMulImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] bitMulMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Bools request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Bools.class, requestData);

            final example.calculator.Bool response = bitMulImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] identityMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Double request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, requestData);

            final example.calculator.Double response = identityImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] concatMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.Strings request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Strings.class, requestData);

            final example.calculator.String response = concatImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private byte[] nameMethod(byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final example.calculator.EnumWrapper request =
                    zserio.runtime.io.ZserioIO.read(example.calculator.EnumWrapper.class, requestData);

            final example.calculator.String response = nameImpl(request, context);

            final byte[] responseData = zserio.runtime.io.ZserioIO.write(response);
            return responseData;
        }

        private interface Method
        {
            byte[] invoke(byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError;
        }

        private static final java.lang.String SERVICE_FULL_NAME = "example.calculator.Calculator";

        private final java.util.Map<java.lang.String, Method> methodMap;
    }

    public static final class CalculatorClient
    {
        public CalculatorClient(zserio.runtime.service.ServiceInterface service)
        {
            this.service = service;
        }

        public example.calculator.Double powerMethod(example.calculator.BaseAndExponent request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("power", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double powerMethod(example.calculator.BaseAndExponent request)
                 throws zserio.runtime.ZserioError
        {
            return powerMethod(request, null);
        }

        public example.calculator.Double intSumMethod(example.calculator.Integers request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("intSum", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double intSumMethod(example.calculator.Integers request)
                 throws zserio.runtime.ZserioError
        {
            return intSumMethod(request, null);
        }

        public example.calculator.Double byteSumMethod(example.calculator.Bytes request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("byteSum", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double byteSumMethod(example.calculator.Bytes request)
                 throws zserio.runtime.ZserioError
        {
            return byteSumMethod(request, null);
        }

        public example.calculator.Double intMulMethod(example.calculator.Integers request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("intMul", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double intMulMethod(example.calculator.Integers request)
                 throws zserio.runtime.ZserioError
        {
            return intMulMethod(request, null);
        }

        public example.calculator.Double floatMulMethod(example.calculator.Doubles request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("floatMul", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double floatMulMethod(example.calculator.Doubles request)
                 throws zserio.runtime.ZserioError
        {
            return floatMulMethod(request, null);
        }

        public example.calculator.Bool bitMulMethod(example.calculator.Bools request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("bitMul", requestData, context);

            final example.calculator.Bool response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Bool.class, responseData);
            return response;
        }

        public example.calculator.Bool bitMulMethod(example.calculator.Bools request)
                 throws zserio.runtime.ZserioError
        {
            return bitMulMethod(request, null);
        }

        public example.calculator.Double identityMethod(example.calculator.Double request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("identity", requestData, context);

            final example.calculator.Double response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.Double.class, responseData);
            return response;
        }

        public example.calculator.Double identityMethod(example.calculator.Double request)
                 throws zserio.runtime.ZserioError
        {
            return identityMethod(request, null);
        }

        public example.calculator.String concatMethod(example.calculator.Strings request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("concat", requestData, context);

            final example.calculator.String response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.String.class, responseData);
            return response;
        }

        public example.calculator.String concatMethod(example.calculator.Strings request)
                 throws zserio.runtime.ZserioError
        {
            return concatMethod(request, null);
        }

        public example.calculator.String nameMethod(example.calculator.EnumWrapper request,
                java.lang.Object context) throws zserio.runtime.ZserioError
        {
            final byte[] requestData = zserio.runtime.io.ZserioIO.write(request);

            final byte[] responseData = service.callMethod("name", requestData, context);

            final example.calculator.String response =
                    zserio.runtime.io.ZserioIO.read(example.calculator.String.class, responseData);
            return response;
        }

        public example.calculator.String nameMethod(example.calculator.EnumWrapper request)
                 throws zserio.runtime.ZserioError
        {
            return nameMethod(request, null);
        }

        private final zserio.runtime.service.ServiceInterface service;
    }
}
