/**
 * Automatically generated by Zserio Java extension version 2.2.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package example.calculator;

public class BaseAndExponent implements zserio.runtime.io.InitializeOffsetsWriter, zserio.runtime.SizeOf
{
    public BaseAndExponent()
    {
    }

    public BaseAndExponent(java.io.File file)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        final zserio.runtime.io.FileBitStreamReader in = new zserio.runtime.io.FileBitStreamReader(file);
        read(in);
        in.close();
    }

    public BaseAndExponent(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        read(in);
    }

    public BaseAndExponent(
        example.calculator.I32 base_,
        example.calculator.I32 exponent_,
        int unused1_,
        java.lang.String unused2_,
        float unused3_,
        zserio.runtime.array.BoolArray unused5_)
    {
        setBase(base_);
        setExponent(exponent_);
        setUnused1(unused1_);
        setUnused2(unused2_);
        setUnused3(unused3_);
        setUnused5(unused5_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += getBase().bitSizeOf(endBitPosition);
        endBitPosition += getExponent().bitSizeOf(endBitPosition);
        endBitPosition += 32;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUnused2());
        endBitPosition += 32;
        endBitPosition += getUnused5().bitSizeOfAuto(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public example.calculator.I32 getBase()
    {
        return this.base_;
    }

    public void setBase(example.calculator.I32 base_)
    {
        this.base_ = base_;
    }

    public example.calculator.I32 getExponent()
    {
        return this.exponent_;
    }

    public void setExponent(example.calculator.I32 exponent_)
    {
        this.exponent_ = exponent_;
    }

    public int getUnused1()
    {
        return this.unused1_;
    }

    public void setUnused1(int unused1_)
    {
        this.unused1_ = unused1_;
    }

    public java.lang.String getUnused2()
    {
        return this.unused2_;
    }

    public void setUnused2(java.lang.String unused2_)
    {
        this.unused2_ = unused2_;
    }

    public float getUnused3()
    {
        return this.unused3_;
    }

    public void setUnused3(float unused3_)
    {
        this.unused3_ = unused3_;
    }

    public zserio.runtime.array.BoolArray getUnused5()
    {
        return this.unused5_;
    }

    public void setUnused5(zserio.runtime.array.BoolArray unused5_)
    {
        this.unused5_ = unused5_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BaseAndExponent)
        {
            final BaseAndExponent that = (BaseAndExponent)obj;

            return
                    ((this.base_ == null) ? that.base_ == null : this.base_.equals(that.base_)) &&
                    ((this.exponent_ == null) ? that.exponent_ == null : this.exponent_.equals(that.exponent_)) &&
                    this.unused1_ == that.unused1_ &&
                    ((this.unused2_ == null) ? that.unused2_ == null : this.unused2_.equals(that.unused2_)) &&
                    java.lang.Float.floatToIntBits(this.unused3_) == java.lang.Float.floatToIntBits(that.unused3_) &&
                    ((this.unused5_ == null) ? that.unused5_ == null : this.unused5_.equals(that.unused5_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.Util.HASH_SEED;

        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.base_ == null) ? 0 : this.base_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.exponent_ == null) ? 0 : this.exponent_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + this.unused1_;
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.unused2_ == null) ? 0 : this.unused2_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + java.lang.Float.floatToIntBits(this.unused3_);
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((this.unused5_ == null) ? 0 : this.unused5_.hashCode());

        return result;
    }

    public void read(final zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        this.base_ = new example.calculator.I32(in);

        this.exponent_ = new example.calculator.I32(in);

        this.unused1_ = in.readInt();

        this.unused2_ = in.readString();

        this.unused3_ = in.readFloat32();

        this.unused5_ = new zserio.runtime.array.BoolArray(in,
                zserio.runtime.array.Array.AUTO_LENGTH);
    }

    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = getBase().initializeOffsets(endBitPosition);
        endBitPosition = getExponent().initializeOffsets(endBitPosition);
        endBitPosition += 32;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUnused2());
        endBitPosition += 32;
        endBitPosition = getUnused5().initializeOffsetsAuto(endBitPosition);

        return endBitPosition;
    }

    public void write(java.io.File file) throws java.io.IOException, zserio.runtime.ZserioError
    {
        zserio.runtime.io.FileBitStreamWriter out = new zserio.runtime.io.FileBitStreamWriter(file);
        write(out);
        out.close();
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        write(out, true);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out, boolean callInitializeOffsets)
            throws java.io.IOException, zserio.runtime.ZserioError
    {
        getBase().write(out, false);

        getExponent().write(out, false);

        out.writeInt(getUnused1());

        out.writeString(getUnused2());

        out.writeFloat32(getUnused3());

        getUnused5().writeAuto(out);
    }

    private example.calculator.I32 base_;
    private example.calculator.I32 exponent_;
    private int unused1_;
    private java.lang.String unused2_;
    private float unused3_;
    private zserio.runtime.array.BoolArray unused5_;
}
