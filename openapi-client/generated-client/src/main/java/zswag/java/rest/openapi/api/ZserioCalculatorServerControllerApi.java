/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package zswag.java.rest.openapi.api;

import zswag.java.rest.openapi.model.BaseAndExponentOpenApi;
import zswag.java.rest.openapi.model.BoolOpenApi;
import zswag.java.rest.openapi.model.BoolsOpenApi;
import zswag.java.rest.openapi.model.BytesOpenApi;
import zswag.java.rest.openapi.model.DoubleOpenApi;
import zswag.java.rest.openapi.model.DoublesOpenApi;
import zswag.java.rest.openapi.model.EnumWrapperOpenApi;
import zswag.java.rest.openapi.model.IntegersOpenApi;
import zswag.java.rest.openapi.model.StringOpenApi;
import zswag.java.rest.openapi.model.StringsOpenApi;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-20T14:32:47.992207+01:00[Europe/Berlin]")
@Validated
@Api(value = "ZserioCalculatorServerController", description = "the ZserioCalculatorServerController API")
public interface ZserioCalculatorServerControllerApi {

    @ApiOperation(value = "", nickname = "bitMul", notes = "", response = BoolOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = BoolOpenApi.class) })
    @RequestMapping(value = "/bitMul",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<BoolOpenApi> bitMul(@ApiParam(value = "", required=true ) @Valid @RequestBody BoolsOpenApi body);


    @ApiOperation(value = "", nickname = "byteSum", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/byteSum",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> byteSum(@ApiParam(value = "", required=true ) @Valid @RequestBody BytesOpenApi body);


    @ApiOperation(value = "", nickname = "concat", notes = "", response = StringOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = StringOpenApi.class) })
    @RequestMapping(value = "/concat",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<StringOpenApi> concat(@ApiParam(value = "", required=true ) @Valid @RequestBody StringsOpenApi body);


    @ApiOperation(value = "", nickname = "floatMul", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/floatMul",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> floatMul(@ApiParam(value = "", required=true ) @Valid @RequestBody DoublesOpenApi body);


    @ApiOperation(value = "", nickname = "getBitMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getBitMul",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getBitMul(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<Boolean> values);


    @ApiOperation(value = "", nickname = "getByteSum", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getByteSum",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getByteSum(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<byte[]> values);


    @ApiOperation(value = "", nickname = "getConcat", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getConcat",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getConcat(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<String> values);


    @ApiOperation(value = "", nickname = "getFloatMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getFloatMul",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getFloatMul(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<Double> values);


    @ApiOperation(value = "", nickname = "getIntMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getIntMul",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getIntMul(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<Integer> values);


    @ApiOperation(value = "", nickname = "getIntSum", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getIntSum",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getIntSum(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "values", required = true) List<Integer> values);


    @ApiOperation(value = "", nickname = "getName", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getName",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getName(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "value", required = true) Integer value);


    @ApiOperation(value = "", nickname = "getPower", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/getPower",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> getPower(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "base", required = true) Integer base, @NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "exponent", required = true) Integer exponent);


    @ApiOperation(value = "", nickname = "identify", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/identify",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> identify(@ApiParam(value = "", required=true ) @Valid @RequestBody DoubleOpenApi body);


    @ApiOperation(value = "", nickname = "intMul", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/intMul",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> intMul(@ApiParam(value = "", required=true ) @Valid @RequestBody IntegersOpenApi body);


    @ApiOperation(value = "", nickname = "intSum", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/intSum",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> intSum(@ApiParam(value = "", required=true ) @Valid @RequestBody IntegersOpenApi body);


    @ApiOperation(value = "", nickname = "name", notes = "", response = StringOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = StringOpenApi.class) })
    @RequestMapping(value = "/name",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<StringOpenApi> name(@ApiParam(value = "", required=true ) @Valid @RequestBody EnumWrapperOpenApi body);


    @ApiOperation(value = "", nickname = "power", notes = "", response = DoubleOpenApi.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = DoubleOpenApi.class) })
    @RequestMapping(value = "/power",
        produces = "*/*,application/x-zserio-object", 
        consumes = "application/x-zserio-object",
        method = RequestMethod.POST)
    ResponseEntity<DoubleOpenApi> power(@ApiParam(value = "", required=true ) @Valid @RequestBody BaseAndExponentOpenApi body);


    @ApiOperation(value = "", nickname = "putIdentify", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/putIdentify",
        produces = "*/*,text/plain", 
        method = RequestMethod.PUT)
    ResponseEntity<String> putIdentify(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "value", required = true) Double value);


    @ApiOperation(value = "", nickname = "putIdentifyJson", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/putIdentifyJson",
        produces = "application/json", 
        method = RequestMethod.PUT)
    ResponseEntity<String> putIdentifyJson(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "value", required = true) Double value);


    @ApiOperation(value = "", nickname = "urlGetBitMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/bitMul/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetBitMul(@ApiParam(value = "", required=true) @PathVariable("values") List<Boolean> values);


    @ApiOperation(value = "", nickname = "urlGetByteSum", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/byteSum/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetByteSum(@ApiParam(value = "", required=true) @PathVariable("values") List<byte[]> values);


    @ApiOperation(value = "", nickname = "urlGetConcat", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/concat/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetConcat(@ApiParam(value = "", required=true) @PathVariable("values") List<String> values);


    @ApiOperation(value = "", nickname = "urlGetFloatMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/floatMul/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetFloatMul(@ApiParam(value = "", required=true) @PathVariable("values") List<Double> values);


    @ApiOperation(value = "", nickname = "urlGetIntMul", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/intMul/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetIntMul(@ApiParam(value = "", required=true) @PathVariable("values") List<Integer> values);


    @ApiOperation(value = "", nickname = "urlGetIntSum", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/intSum/{values}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetIntSum(@ApiParam(value = "", required=true) @PathVariable("values") List<Integer> values);


    @ApiOperation(value = "", nickname = "urlGetName", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/name/{value}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetName(@ApiParam(value = "", required=true) @PathVariable("value") Integer value);


    @ApiOperation(value = "", nickname = "urlGetPower", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/power/{base}/{exponent}",
        produces = "*/*,text/plain", 
        method = RequestMethod.GET)
    ResponseEntity<String> urlGetPower(@ApiParam(value = "", required=true) @PathVariable("base") Integer base, @ApiParam(value = "", required=true) @PathVariable("exponent") Integer exponent);


    @ApiOperation(value = "", nickname = "urlPutIdentify", notes = "", response = String.class, tags={ "zserio-calculator-server-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal Server Error", response = String.class),
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/identify/{value}",
        produces = "*/*,text/plain", 
        method = RequestMethod.PUT)
    ResponseEntity<String> urlPutIdentify(@ApiParam(value = "", required=true) @PathVariable("value") Double value);

}

