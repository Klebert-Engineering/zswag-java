/**
 * Automatically generated by Zserio Java extension version 2.3.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package example.calculator;

public enum Enum implements zserio.runtime.io.InitializeOffsetsWriter,
        zserio.runtime.SizeOf, zserio.runtime.ZserioEnum
{
    TEST_ENUM_0(42),
    TEST_ENUM_1(1),
    TEST_ENUM_2(2);

    private Enum(int value)
    {
        this.value = value;
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 32;
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        write(out, false);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out, boolean callInitializeOffsets)
            throws java.io.IOException
    {
        out.writeInt(getValue());
    }

    public static Enum readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readInt());
    }

    public static Enum toEnum(int value)
    {
        switch (value)
        {
            case 42:
                return TEST_ENUM_0;
            case 1:
                return TEST_ENUM_1;
            case 2:
                return TEST_ENUM_2;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration Enum: " + value + "!");
        }
    }

    private int value;
}
