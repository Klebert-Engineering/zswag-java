/**
 * Automatically generated by Zserio Java extension version 2.4.2.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package example.calculator;

public class BaseAndExponent implements zserio.runtime.io.InitializeOffsetsWriter, zserio.runtime.SizeOf
{
    public BaseAndExponent()
    {
    }

    public BaseAndExponent(java.io.File file)
            throws java.io.IOException
    {
        final zserio.runtime.io.FileBitStreamReader in = new zserio.runtime.io.FileBitStreamReader(file);
        read(in);
        in.close();
    }

    public BaseAndExponent(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public BaseAndExponent(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(contextNode, in);
    }

    public BaseAndExponent(
            example.calculator.I32 base_,
            example.calculator.I32 exponent_,
            int unused1_,
            java.lang.String unused2_,
            float unused3_,
            boolean[] unused5_)
    {
        setBase(base_);
        setExponent(exponent_);
        setUnused1(unused1_);
        setUnused2(unused2_);
        setUnused3(unused3_);
        setUnused5(unused5_);
    }

    public static void createPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        example.calculator.I32.createPackingContext(contextNode.createChild());
        example.calculator.I32.createPackingContext(contextNode.createChild());
        contextNode.createChild().createContext();
        contextNode.createChild();
        contextNode.createChild();
        contextNode.createChild();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContextNode contextNode)
    {
        base_.initPackingContext(contextNode.getChildren().get(0));
        exponent_.initPackingContext(contextNode.getChildren().get(1));
        contextNode.getChildren().get(2).getContext().init(
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(unused1_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += base_.bitSizeOf(endBitPosition);
        endBitPosition += exponent_.bitSizeOf(endBitPosition);
        endBitPosition += 32;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(unused2_);
        endBitPosition += 32;
        endBitPosition += unused5_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += base_.bitSizeOf(contextNode.getChildren().get(0),
                endBitPosition);
        endBitPosition += exponent_.bitSizeOf(contextNode.getChildren().get(1),
                endBitPosition);
        endBitPosition += contextNode.getChildren().get(2).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(unused1_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(unused2_);
        endBitPosition += 32;
        endBitPosition += unused5_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public example.calculator.I32 getBase()
    {
        return base_;
    }

    public void setBase(example.calculator.I32 base_)
    {
        this.base_ = base_;
    }

    public example.calculator.I32 getExponent()
    {
        return exponent_;
    }

    public void setExponent(example.calculator.I32 exponent_)
    {
        this.exponent_ = exponent_;
    }

    public int getUnused1()
    {
        return unused1_;
    }

    public void setUnused1(int unused1_)
    {
        this.unused1_ = unused1_;
    }

    public java.lang.String getUnused2()
    {
        return unused2_;
    }

    public void setUnused2(java.lang.String unused2_)
    {
        this.unused2_ = unused2_;
    }

    public float getUnused3()
    {
        return unused3_;
    }

    public void setUnused3(float unused3_)
    {
        this.unused3_ = unused3_;
    }

    public boolean[] getUnused5()
    {
        return unused5_.getRawArray();
    }

    public void setUnused5(boolean[] unused5_)
    {
        this.unused5_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BooleanRawArray(unused5_),
                new zserio.runtime.array.ArrayTraits.BoolArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BaseAndExponent)
        {
            final BaseAndExponent that = (BaseAndExponent)obj;

            return
                    ((base_ == null) ? that.base_ == null : base_.equals(that.base_)) &&
                    ((exponent_ == null) ? that.exponent_ == null : exponent_.equals(that.exponent_)) &&
                    unused1_ == that.unused1_ &&
                    ((unused2_ == null) ? that.unused2_ == null : unused2_.equals(that.unused2_)) &&
                    java.lang.Float.floatToIntBits(unused3_) == java.lang.Float.floatToIntBits(that.unused3_) &&
                    ((unused5_ == null) ? that.unused5_ == null : unused5_.equals(that.unused5_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.Util.HASH_SEED;

        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((base_ == null) ? 0 : base_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((exponent_ == null) ? 0 : exponent_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + unused1_;
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((unused2_ == null) ? 0 : unused2_.hashCode());
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result + java.lang.Float.floatToIntBits(unused3_);
        result = zserio.runtime.Util.HASH_PRIME_NUMBER * result +
                ((unused5_ == null) ? 0 : unused5_.hashCode());

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        base_ = new example.calculator.I32(in);

        exponent_ = new example.calculator.I32(in);

        unused1_ = in.readInt();

        unused2_ = in.readString();

        unused3_ = in.readFloat32();

        unused5_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BooleanRawArray(),
                new zserio.runtime.array.ArrayTraits.BoolArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        unused5_.read(in);
    }

    public void read(zserio.runtime.array.PackingContextNode contextNode, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        base_ = new example.calculator.I32(contextNode.getChildren().get(0), in);

        exponent_ = new example.calculator.I32(contextNode.getChildren().get(1), in);

        unused1_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                contextNode.getChildren().get(2).getContext().read(
                        new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();

        unused2_ = in.readString();

        unused3_ = in.readFloat32();

        unused5_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BooleanRawArray(),
                new zserio.runtime.array.ArrayTraits.BoolArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        unused5_.read(in);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = base_.initializeOffsets(endBitPosition);
        endBitPosition = exponent_.initializeOffsets(endBitPosition);
        endBitPosition += 32;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(unused2_);
        endBitPosition += 32;
        endBitPosition = unused5_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContextNode contextNode, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = base_.initializeOffsets(contextNode.getChildren().get(0),
                endBitPosition);
        endBitPosition = exponent_.initializeOffsets(contextNode.getChildren().get(1),
                endBitPosition);
        endBitPosition += contextNode.getChildren().get(2).getContext().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(unused1_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(unused2_);
        endBitPosition += 32;
        endBitPosition = unused5_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    public void write(java.io.File file) throws java.io.IOException
    {
        zserio.runtime.io.FileBitStreamWriter out = new zserio.runtime.io.FileBitStreamWriter(file);
        write(out);
        out.close();
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        write(out, true);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out, boolean callInitializeOffsets)
            throws java.io.IOException
    {
        base_.write(out, false);

        exponent_.write(out, false);

        out.writeInt(unused1_);

        out.writeString(unused2_);

        out.writeFloat32(unused3_);

        unused5_.write(out);
    }
    
    @Override
    public void write(zserio.runtime.array.PackingContextNode contextNode,
            zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        base_.write(contextNode.getChildren().get(0), out);

        exponent_.write(contextNode.getChildren().get(1), out);

        contextNode.getChildren().get(2).getContext().write(
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(unused1_));

        out.writeString(unused2_);

        out.writeFloat32(unused3_);

        unused5_.write(out);
    }

    private example.calculator.I32 base_;
    private example.calculator.I32 exponent_;
    private int unused1_;
    private java.lang.String unused2_;
    private float unused3_;
    private zserio.runtime.array.Array unused5_;
}
